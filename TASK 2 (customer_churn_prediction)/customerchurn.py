# -*- coding: utf-8 -*-
"""CustomerChurn.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JCMUNooxPNeABzi2nf9pLmpgIA3fr5KA
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.graph_objects as go
sns.set(font_scale=2)

#importing the dependencies

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder,OrdinalEncoder
from sklearn.preprocessing import MinMaxScaler
from imblearn.over_sampling import SMOTE
from sklearn.ensemble import RandomForestClassifier

from sklearn.metrics import precision_score,recall_score,f1_score,classification_report
from yellowbrick.classifier import DiscriminationThreshold,PrecisionRecallCurve

data=pd.read_csv('/content/Churn_Modelling.csv')
data.head()



data.info()
data.describe()

dataset= data.drop(columns = ['RowNumber','CustomerId','Surname'])
dataset.info()
dataset['Gender'].unique()

dataset['Gender'].unique()
dataset= pd.get_dummies(data=dataset,drop_first=True)
dataset

dataset.Exited.plot.hist()

print((dataset.Exited==0).sum())
print((dataset.Exited==1).sum())

dataset_2=dataset.drop(columns='Exited')
dataset_2.corrwith(dataset['Exited']).plot.bar(figsize=(16,9), title='Correlated with Exited Column', rot = 45,grid = True)

corr=dataset.corr()
plt.figure(figsize=(16,9))
sns.heatmap(corr,annot=True)

X= dataset.drop(columns='Exited')
y= dataset['Exited']


from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)


X_test.shape

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X_train= scaler.fit_transform(X_train)
X_test= scaler.transform(X_test)

X_train

from sklearn.linear_model import LogisticRegression
clf = LogisticRegression(random_state=0).fit(X_train, y_train)

y_pred= clf.predict(X_test)

from sklearn.metrics import accuracy_score, confusion_matrix, f1_score, precision_score, recall_score

acc=accuracy_score(y_test,y_pred)
f1=f1_score(y_test,y_pred)
prec=precision_score(y_test,y_pred)
rec=recall_score(y_test,y_pred)

results=pd.DataFrame([['Logistic regression',acc,f1,prec,rec]],columns=['Model','Accuracy','F1','Precision','Recall'])
results

from sklearn.ensemble import RandomForestClassifier
print("\nRandom Forest Model:")
print("Accuracy:", accuracy_score(y_test, y_pred_forest))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred_forest))
print("Classification Report:\n", classification_report(y_test, y_pred_forest))

single_obs=[[647,40,3,85000.45,2,0,0,92012.45,0,1,1]]
prediction = clf.predict(scaler.fit_transform(single_obs))

if prediction == 0:
    print('Customer will be staying with the bank')
else:
    print('Customer will be leaving the bank')

